11일차================================================
#String 클래스 - 메소드 기능을 이해하여 적절하게 활용
#상속
	-부모 클래스를 물려 받는 것
	-부모는 한 클래스만 가능
	-private으로 된 필드/메소드는 상속은 받으나 직접 접근할 수 없다.
	-상속은 왜 사용?
		-코드의 중복을 제거
		-다양성을 통해 효율적으로 작업하기위해서
	
-클래스 형변환
	-자식 클래스 객체 => 부모 클래스 객체 : 항상 가능, 자동
	-부모 클래스 객체 => 자식 클래스 객체 : 조건부 가능, 강제
	-업 캐스팅(자동) : 
		-자식 클래스의 객체를 부모 클래스의 객체에 저장
	-다운 캐스팅(강제) :
		-부모 클래스의 객체를 자식 클래스의 객체에 저장
		-조건부로 가능
			-업캐스팅된 부모 객체를 다운 캐스팅하는 경우 가능 
#매개변수의 다형성
	-같은 기능을 하는 메소드가 있는데 매개변수로 객체들 종류만 다른 경우
	 여러 객체들의 조상 클래스의 객체로 매개변수를 정한다
	 =>메소드 오버로딩 개수를 줄임
배운것 정리=======================================
#변수 
	-변수 선언방법
	-자료형
	-변수명 작성 규칙과 관례
	-자료형 변환
#연산자
	-연산자 종류 및 결과
	-단항 : ++,--,!
	-이항 : 대부분
	-삼항 : 조건선택연산자
	-증감 : ++,--
	-산술 : +,-,*,/,%
	-비교 : 크기 비교, 조건식
	-논리 : 참,거짓, 조건식
	-대입 : =
#조건식
	-조건문 사용
	-if문 => 조건식
	-switch문 => 변수 또는 식 => 정수,문자열,문자
#반복문
	-for문,while문
	-do while문 : 최소 1번 실행
#배열
	-배열 선언 방법
	-배열은 0번지부터 배열은 크기-1번지까지
	-번지를 잘못접근하면 예외발생
12일차=============================================
	1. 예제가 주어졌을 때 예제를 이해한다.
	2. 예제를 풀기 위해 사용해야하는 문법을 파악할 수 있다.
	3. 예제를 해결하기 위해 단계를 구분할 수 있다.(주석으로 나눌 수 있다)
	4. 예제를 풀기 위해 필요한 변수, 배열, 객체등을 선정할 수 있다.
	5. 부분적으로(3번에서 작성한 단계별) 코딩을 통해 해결 할 수 있다.
	6. 원하는 코딩을 작성할 수 있다.
	7. 작성한 코딩을 효율적으로 정리할 수 있다.
#추상 클래스(abstract,interface)
	//접근제한자 예약어 리턴타입 메소드명(매개변수);
	//추상 클래스를 상속받은 일반 클래스는 부모의 추상 메소드를 반드시 오버라이딩해야함
	//추상 클래스를 상속받은 추상 클래스는 부모의 추상 메소드를 반드시 오버라이딩해야 하는 건 아님
	-몸체없는 메소드를 포함한 클래스, 클래스 선언부에 abstract 키워드 사용
	-장점 : 일관된 인터페이스 제공
#interface : 공동 작업을 위한 인터페이스 제공
	-모든 인터페이스의 메소드는 public
	-자동으로 public static final이 붙음
#Object 클래스
	-모든 클래스의 조상 클래스
	-Object 클래스에 있는 메소드들을 오버라이딩하여 활용할 수 있다.
	-equals(Object obj)
		-Object의 equals는 주소를 비교
		-오버라이딩해서 사용
	-toString()
		-객체의 정보를 하나의 문자열로 변환 
		-오버라이딩해서 필드정보를 쉽게 확인할 수 있게함