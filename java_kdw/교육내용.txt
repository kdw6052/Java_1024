2일차=======================================================================
＃형변환
-자동형변환 : 컴파일러가 자동으로 작은자료형을 큰자료형으로 변환
-강제형변환 : 큰자료형에서 작은 자료형으로 변환시 데이터손실이 발생할수있음(데이터의 변형,손실 감수)
#변수와 메모리 구조
-static = 메소드가 저장되는 공간
#출력메소드
-printf() = 정해져 있는 형식에 맞춰서 그 형식에 맞는 값을 줄바꿈 하지 않고 출력 [잘안씀]
#escape 문자
-\   + 	t=tap (출력에 표기)
	n=엔터
	\=\
	'='
	"="
	u-유니코드표시
=============================
1.변수
 - 변수를 선언할 수 있다.

 -변수 선언 방법
 -자료형
 -변수명 작성 규칙과 관례
 -Scanner
 -sysout

2.연산자
 -연산자 종류를 알고, 결과를 예측할 수 있다.
================================
#연산자
 -증감연산자 : ++,--
 -전위연산 : 먼저 연산 후 다른 연산 실행
 -후위연산 : 다른 연산 우선 실행 후 연산

 -산술연산자 :+,-,*,/,%(나머지연산자)
	    /를 사용할시 정수인가 고민하고 작업하기
	    /:정수/정수 =>정수
	    /,% : 2번째 수는 0이 오면 안됨.
	    % : 나누었을때 나머지 값
 -비교연산자(==,!=<=,>=,<,>) : 항상 논리값이 결과 값임
 -논리연산자 : && : 둘다 참이면 참, ~이고
	     || : 둘다 거짓이면 거짓, ~이거나
	     ! : 반대, ~아닌
 -대입연산자 : 오른쪽에 있는 값을 왼쪽에 저장 ex) a=2 ,2 =a(오류), a= 1+b, a+1 =b(오류)
 -삼항연산자 : 조건식? 참 : 거짓; 조건식의 결과 값에 따라 참일경우 식1,거짓일 경우 식2 수행
	     ex)String str = a>b ? "참" : "거짓";
 -비트연산자 : &, |, ~, ^(배타논리, xor)
	& : 1을 참, 0을 거짓으로 본다
	a>>b :a를 비트로 나열한 후 오른쪽으로 b비트만큼 이동,
	        a의 b제곱으로 나눈 효과
 	 <<   :a의b제곱으로 곱한 효과
3일차======================================================================
#조건문★★★★★★★★
	-if(조건식){실행문;}일반적으로 비교연산자가 들어감
	-if~else
		if(조건식){실행문;}else{실행문2;}//실행문이 거짓일시 실행문2 실행
		if(조건식){실행문;}else if(조건식2){}//else if문을 사용할시 조건식을 계속 추가가능
#switch문	
	-switch문 사용하는 경우
		1. 식의 값이 제한적일 때 : %연산자 이용하는 경우
		2. 사용하는 변수 값이 제한적일 때 : 산술연산자를 이용한 계산 예제	
#반복문	
	-for(초기식; 조건식; 증감식){수행될문장;}
	-while(조건식){}
		